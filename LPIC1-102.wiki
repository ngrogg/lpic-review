[[index|back]]

= LPIC1-102 =
== Customize and use the shell environment ==
=== Setting Up the Shell Environment ===
Two main types of shell environments
Interactive Login Shell
log into a console
log in via SSH Interactive non-login shell
Local terminal

Interactive login shell
First thing after logging in
/etc/profile gets read
Calls /etc/profile.d/*
Calls .bash_profile/.profile
Calls .bashrc
Calls /etc/bashrc
Console shows

Interactive non-login shell
Calls .bashrc
Calls /etc/bashrc

How can you tell which one you're in?
echo $0
Shows name of process currently running
-bash
dash indicates a login shell

No dash in non-login shell

/etc/profile
First file read
Sets up system-wide environment variables, umask, history controls etc.
Modifications should be made in profile.d/

/etc/profile.d/
Contains extra configurations for bash

/etc/bashrc
Configure system-wide functions and aliases here

/etc/skel
Contains the default .bash_profile, .bashrc and other files added to a user's
home directory. Added to new user home folders
bash_logout
Empty by default
can add logout messages or commands to force an application to quit

home .bashrc will call system level bashrc

.bash_login, old bash_profile. Largely replaced
Legacy file

=== Customizing the Shell Environment ===
Bash Customization Commands
env
View environment variables for the current shell
All enviromental variables listed

export
Command used to allow child shell session to use an environment variable

set
By itself displays all Bash shell settings
Can also be used to enable/disable BASH settings

set -f, disable file globbing
set +f, enable file globbing

unset
Remove an environment variable

unset VARABLE, do not use $

alias
Used to create a shortcut to longer command

function
Customer command any user can use in a shell

function FUNCTION() {
> ENTER FUNCTION COMMANDS
}

Make function permanent
Add to .bashrc
function FUNCTION() {
  FUNCTION
}

. (dot)
Command used to source or apply function from a file into the current BASH session
or shell script

source
same as .
I typically do 'source .zshrc' to pull in new zsh settings

PATH
location paths separated by ':'
create bin directory in home folder
Move scripts there
Can run them directly from there

Add to PATH
export PATH=$PATH:/filepath/to/add
^^ Be careful or you'll overwrite PATH

echo $PATH
confirm new path added

Make it permanent in .bash_profile
PATH=$PATH:/FILEPATH/TO/ADD
Can use $HOME

=== Hands-On Lab: Modifying the BASH Shell ===
Create the alias.
The first step is to create an alias for the Bash shell that will allow you to
view the service status of the web server itself. You will name this alias webstat.
When you type the command webstat at the prompt, you will see the output of the
command systemctl status httpd.service.

User-created aliases and functions should go in your local ~/.bashrc file.
Using the commands listed, append the following alias to your ~/.bashrc file:

echo 'alias webstat="systemctl status httpd.service"' >> /home/cloud_user/.bashrc

Load and test the alias.
Now that we have created an alias that displays the status of the web server, we
need to tell Bash that we want to use it in our current session. First, we need
to source our .bashrc file using the “dot” (.) command:

. ~/.bashrc
Now that the Bash environment has been refreshed with the new alias from
our ~/.bashrc file, we can use our new alias:

webstat
We should be able to see the output of our service's status command.

Create your function.
The next step is to create a function that will take the name of a directory as a
parameter and print out how much disk space that directory is using.

Using the vi text editor, open up the ~/.bashrc file and add the following
function to the bottom, beneath the alias that you created earlier:

function webspace()
{
    du -h /var/www/html/$1;
}
Save and close your file. Then source the .bashrc file again:

. .bashrc

Use the `webspace` function.
Since the /var/www/html directory is the root location for all of the individual
site locations for this web server, all you need to do is provide the name of the
folder that contains a particular part of the site to the webspace function.
To view the size and contents of the main public web page, enter this command:

webspace main
This will print out the contents of the /var/www/html/main directory and how much
disk space this directory uses. The $1 used in your function is a positional
argument. When you type webspace main at the prompt, the word main is replaced by
the $1 argument, thus providing the output of the command for the
/var/www/html/main directory.

Try the same command again, this time for the customer directory on the web server:

webspace customer
You should see more directories in the output, plus a 5 MB client binary file.

== Customize or write simple scripts ==
=== Basic Shell Scripts ===
Reduce repetitive work
old saying: If you have to type it more than once put it in a script
Useful for automated tasks
task with no input

#! shebang
^^ #!/usr/bin/bash, #!/usr/bin/python
Don't need file extension if you use shebang
I personally use the shebang + the extension to be thorough

#, comment

Scripts need execute permissiosn

Parameters

Positiional arguments/parameters
script option1 option2
$1 = option1
$2 = option2

=== Adding Logic to you shell scripts ===
if Statements
if, else, elseif, fi
test command is used to test for various conditions
|| OR
&& AND
!= Not equal

test command can be used for simpler statements
Remember that you'll need double brackets for OR statements
Alternatively
[ CONDITIONAL ] || [ CONDITIONAL ]

Be aware of logical errors

Testing integers
-eq equlity between two numbers, is the same
-ne inequality between two numbers, is not the same
-gt If one number is higher than another
-lt If one number is lower than another
-ge If one number greater than or equal to another
-le If one number less than or equal to another

Return last value
$?

Returns 0 in most cases, generally greater than 0 is a failure

Can check for output
if [ $? -gt 0 ]; then

=== Bash Loops and sequences ===
for, loop over a fixed number of times
while, loop until a condition is false
until, loops and stops when condition true

sequence
seq x, increment from 1 -> x by 1

seq x y, increment from x -> y by 1

seq x y z, increment from x -> z by y

until [ $var -t 1 ]
do
	LOOP STUFF
	$var=var-1
done

read, takes input from user
exit, returns 0 by default.

Can specify a different exit code
exit VALUE
confirm echo $?

exec,
redirect output into another file/process without sending to current shell

exec > out.log
ls
pwd
cat out.log

== Install and configure X11 ==
=== The basics of X11 ===
Provides graphical rendering for UNIX-like operating systems
Core display serer that provides protocol service for X window system
Extension:
RandR, dynamic resizing of the root window, refresh rates, mirroring displays
GLX, provides rendering of 3d opengl conten within windows
Xinerama: provides the ability to split the desktop across multiple monitors

Basic building blocks
Graphics care -> Linux Kernel and Graphics Driver -> libDRM -> Xserver -> Xlib/XCB
-> Display Manager -> Application
X-server -> /etc/X11/xorg.conf, /etc/X11/xorg.conf.d

Good to practice with older EOL distro
X is different now
Will need to know how to work on newer/older versions of X11

Wayland
Meant to replace X Window System
Simpler rendering protocol
Xwayland, enables X window client to render with Wayland for backwards compatability

=== Installing X11 ===
Example uses EOL CentOS 5
yum grouplist
yum groupinstall "X Window System" -y
telinit to change runlevel (older)
Need to be in runlevel 5
Never use X session as root user

By default uses gdm/twm

Window Manager provides look/feel of desktop
Start window manager without going through gdm

Go to runlevel 4, telinit4
startx, starts window manager for you
Not secure, running window manager while logged in as root user
Bypass password prompt
startx, works as your user too
Security risk

Older system
cat /etc/inittab
Bottom of file
x:5:respawn:/etc/X11/prefdm -nodaemon

Available display managers listed
echo $DISPLAY
:0.0
First 0 which X server
On remote machines it's assigned the number 1
. separates which X server from which screen
Different numbers for different screens

=== X11 Configurations ===
/etc/X11/xorg.conf
Primary configuration file used for the X Display Server.
use man xorg.conf for a full listing of all options

X (Xorg)
Used to create a new configuration file for your X server

xdpyinfo
Displays information about the current X session and X server instance.

/etc/X11/xorg.conf.d/
Directotry that contains supplementary Xorg configuration files

Input device lists options for Keyboard type and layout

Device is for GPU

Screen is for GPU/Monitor

Some systems create a symbolic link between X -> Xorg command
runlevel 3 is good to use, X prefers to not have a running server

Back up existing conf file
X -configure

X -config /root/xorg.conf.new to test new config
To quit use control + alt + backspace
Copy new config file to /etc/X11/xorg.conf
Jump to runlevel 5

xdpyinfo | less to review output
name of display, as well as version
enabled extensions
number of screens + Default screen
Screen dimensions

Virtualbox doesn't work well with custom X server options
Modes option under SubSection "Display" can be used to increase resolution
Put higher resolutions before lower resolution, to fall back
Make change to 16/24 bit color depths

In order for changes to take effect reboot system

Modern Linux distros usually don't use a centralized conf file
^^ I don't even think Slackware does

Newer distros use xorg.conf.d
Begin with two digits
00, 09, 10 etc.
Loaded in order

ls /usr/share/X11/xorg.conf.d
Other conf files
Modern X11 is better at detecting what's plugged in and configured

=== Remote Graphical Connections ===
Ability to allow remote displays

xhost
Older and insecure method of allowing client systems theability to display
remote X11 windows

Remote display connections disabled by default
xhost +, enable
xhost -, disable

ip addr show
inet IP

xhost + IP

ssh -Y USER@IP, forward X11 request
Set up display environment
export DISPLAY"127.0.0.1:10.0"
Tell system to display windows on localhost
Using ssh daemon on remote system use 10.0
Confirm with xclock/xeyes

xauth
Allows a user to edit and view security information that grants a user the ability
to control remote X11 client windows

xauth list
Shows what sessions are running currently

VNC
Virtual Network Computing enables a remote computer to control the graphical display
of a remote system. Insecure by default

Tiger VNC server
yum -y install tigervnc-server
copy over unit file
cp /usr/systemd/vncserver@.server /etc/systemd/system/vncserver@:1.service
Assign it it's own unique number
Configure service to work with account
Edit copied file
Scroll to bottom
:%s/<USER>/user/g
Edited systemd file, reload daemon
systemd daemon-reload
Set VNC password for local user
vncpasswd command
^^ Service will fail otherwise
has to be at least 6 characters long
Use modified unit name when starting service
Enable service
Two ways to connect

Insecure
port 5900
ss -tlpn | grep vnc
Shows vnc listening on port 5901
Need to open port 5901 in firewall
firewall-cmd --permanent --ad-port=5901/tcp
firewall-cmd --reload

Go to desktop, use remote connection software vinegar
Protocol VNC
Host IP:PORT
Connect, enter VNC password
All network traffic is not encrypted
Session can be hijacked
Re-do but with encrypted SSH tunnel

Secure
Close VNC port on remote
firewall-cmd --permanent --remove-port=5901/tcp
firewall-cmd --reload

On client
ssh -C -L 5901:localhost:5901 IP
Redirect from 5901:localhost to IP:5901
Once that's running to VNC app

Protocol VNC
Host localhost:5901
Enter VNC password


SPICE
TLS encrypted remote desktop protocol (RDP) that can be used in Linux, Windows and
Android systems.

Protocol SPICE

Two way audio
Can also use USB on remote system

== Graphical Desktops ==
=== The primary Linux Desktop Environments ===
Collection of software
GTK+ Based desktops, GIMP Tool Kit
Written in 'C' language library. Notable
GNOME, XFCE, LXDE

QT based desktop
Qt is a 'C++' language library
Desktops that use this library
KDE, LXQT

== Accessibility ==
=== Assistive Technologies on the Linux Desktop ===
Uses GNOME
Visual aids
High Contrast
Large Text
Increased cursor size
Zoom
Screen reader, orca backend
Reads text, very irritating
Can also modify orca from the command line
orca --text-setup
Voice, language
Can enable echo by word and enable key echo
Can also enable braille...

Sound keys, plays a sound when cap/num lock is on
Visual Alerts
Screen will blink when alert displays
Can use screen keyboard

This is literally just covering the Universal Access section on Gnome...

== Manage User and Group Accounts and related system files ==
=== Adding and Removing Users ===
useradd
useradd command is for the creation of new user accounts on a Linux system

useradd -m -c "COMMENT" -s  /path/to/shell USERNAME
Create user + home directory with a comment, specify default shell
Not all distros require this. Don't forget to set the password for the new user

passwd
passwd commands is for setting a password for a specfic user, can also be used
by a user to change their own password

passwd -e USER
Set current password as OTP for user

userdel
userdel command removes a user's account from the system.
Without the -r option the user's home directory will not be removed

number in place of the username
UID

=== Adding and Removing Groups ===
groups USERNAME
show user what groups user is a member of

groupadd GROUP
Create a new group on the system

User can be added to a group during creation
useradd -G GROUP -m USERNAME
^^ Make sure group exists
-g pertains to user's primary group

groupdel GROUP
Removes a group from the system.
Users in the group will still exist

=== User and Group Configuration Files ===
/etc/passwd
Flat file database that contains info on user and system accounts

/etc/shadow
Contains encrypted passwords for accounts listed in /etc/passwd file

/etc/group
Contains group definitions along with what members belong to each group

Red Hat systems, root has UID of 0
Service users are usually less than 1000
Server users are usually over 1000

/etc/passwd
$#$ - password encryption type
$1$ = MD5
$2a$, $2y$ = Blowfish
$5$ = SHA-256
$6$ = SHA-512
Following encryption algorithm is the salt
^^ Looked it up, it is indeed called salt...

Finally is hashed password.

Main configuration Files

/etc/skel
Special directory that contains ite3ms that automatically get added to a new user's
home directory.

/etc/default/useradd
Configuration file is referenced with a new user account is created

getent
Command is used to query a database for information about a user or group

HOME=/home
default home creation
INACTIVE=-1
Prevents user from accessing with an expired password
SHELL, set default shell
GROUP=100
Defaults to 1000
getent group 100
users:x:100:
Old users default group

/etc/login.defs
Takes precedence over default useradd file

=== User and Group Modifications ===
usermod
modify an existing user account

usermod -a -G GROUP USER
^^ Capitals matter

chage
list and modify the aging parameters of a user's password

groupmod
modify attributes of an existing group, such as name, group ID, etc.

groupmod -g GROUPID GROUP
Change groups group id

groupmod -n GROUP
give group a new name

=== Hands-On Lab: Creating Users And Groups and Managing User Accounts ===
Create a Shared Directory Called /test_scripts
Create a directory called /test_scripts.

Users Added to the System
Add four user accounts to the system that will be used for working on the test
scripts.

Add Users to a Common Group
Add the four new users to the testers group already created on the system.

Set Appropriate Group Ownership and Permissions
The group testers needs to own the /test_scripts directory so that the new users
can all share it. Additionally, the owner and group permissions should be read,
write, and execute, but there should be no privileges for anyone else.


== Automate system administration tasks by scheduling jobs ==
=== Cron ===
crontab used to view and edit a cron table file

/etc/cron.hourly
/etc/cron.daily
/etc/cron.weekly
/etc/cron.monthly

/etc/cron.d
Directory that contains cron jobs for the system

/etc/conf.deny
User listed in this file will be prevented from using crontabs
^ Petition to add a certain client's dev...

man 4 crontabs
Local documentation for crontab files and their formats

minute hour dayOfMonth month dayOfWeek command
* * * * * /usr/bin/bash /root/scripts/whatever.sh

*/15 * * * * command
^ Run every 15 minutes

On own file enter user
USER command
Optional, but best practice
Remember to use full paths, runs in it's own shell

crontab -r, clear cron

=== At ===
What if you just want to run a single command?
Usually not installed by default

at
run a one time job

atq
View job queue

atrm
Remove a job using it's job number

at.allow/deny
Allow/deny users the ability to run jobs

Opens in a shell
at now + 5 minutes
at 4:00 AM tomorrow
COMMAND
<EOT> = End of Transmissions
ctrl + d = EOT

Remove job,
atrm JOBID

Run a script
at -f PATH/TO/SCRIPT TIME PM MONTH DAY

=== Systemd Timer Unit Files ===
Timer units,
end in .timer extension
Need a service file to go with it

Another type of timer doesn't have a file
monotonic and realtime
monotonic are designed to run after a tiem has passed
Can repeat as long as system is running
Timers deleted
Directive, OnBootSec=, OnActiveSec=
Realtime, OnCalendar= Uses calendar function

Why not use cron/at?
Simpler syntax (lol)

Transient Timers:
Set up by systemd-run command, do not require a service file
Like At jobs
[Timer] Section
Monotonic OnBootSec=,OnUnitSecActiveSec=
Realtime OnCalendar=
Unit=
Some timer unit files enabled with
[Install]
WantedBy=timers.target
man 5 systemd.timer
man 7 systemd.time

Commands
systemctl list-timers --all
List all timers on a system

systemctl cat <foo.timer>
Review the contens of a timer unit file

systemd-run --on-active=
Create a transient timer, that does not require a service file

Timer units will have a [Unit] section as well

Basic Syntax,
[Unit]
Description=

[Timer]
OnCalendar=*-*-* HH:MM:SS
^Y-M-D
Resistent=true
Unit=whatever.service
Set to rerun,

[Install]
WantedBy=

Then enable/start


=== Hands-on Lab: Scheduling a systemd service job with timer units ===
During the time that your development team has spent working on the new web-based
API for your organization, there have been several instances of mistaken keystrokes
or processes that have necessitated the restoration of the site directory from backup.

You have been asked to run periodic backups of the website directory and, given that
the development environment does not have access to the backup network, you have
decided to write a custom service that will do so.

You have previously written the systemd unit files to back up the site.
You have been provided a file called web-backup.sh in your /root directory
(NOTE: you will need to become the root user to complete your work).
Using that file and the associated web-backup.service, create a systemd timer unit
file that will control the schedule of your service.

After you have all three components ready, stage the files in their appropriate
locations and start the service for your team and turn it back over for their use.

￼
Create a Service Timer Unit File
Follow the scenario to create the appropriate timer unit file.

￼
Putting Files Where They Belong
Copy the service and timer files and the shell script into the correct locations.

￼
Run the Custom Service
Once the backup service has been created successfully from the scenario,
make sure it is running so the backup will happen as scheduled.

== Localization and Internationalization ==
=== Working with the System's Locale ===
locale
Display locale info

localectl
Set default system language/character encoding

locatectl list-locale
List all locales

UTF-8
Dominant character encoding

ISO-8859
Encoding used throughout the world

iconv
Utility that can be used to convert files from one character encoding to another

Set using LANG environment variable
LANG=LANGUAGE.utf8
Be aware of encoding

Some commands are still english, like man pages
Need to install language specific packs for a specific application

Example Polish language uses iso88592

LANG=C
Use C language environment
Useful consistent results across systems
Blocks are stand in characters

file -i FILE will show encoding
look for charset

inconv -f encodingFrom -t encodingTo -o outFile inFile

Permanently set LANG variable
localectl set-locale ENCODING

=== Time and Date on the Linux System ===
date
displays date

date -u, view UTC time

View YMD only
date +%F
YYYY-MM-DD
+ Format modifier
date +%D
DD/MM/YY

I use date +%Y%m%d a lot

Set time with
date -s "FORMAT"

timedatectl
display the current date and time settings
allows updating of the system time and RTC clock

timedatectl set-time "FORMAT"

timedatectl set-timezone "TIMEZONE"

tzselect
Menu driven command that will find a region's time zone

TZ
Environemt variable for a time zone
can be used in a script or user's BASH profile

Realtime clock, hardware clock

Time and Date Files
RHEL
/etc/localtime
symbolic link to /usr/share/zoneinfo

Deb
/etc/timezone

== Maintain system time ==
=== Working with Remote Time Servers ===
Network Time Protocol
Various Stratum 0
Reference clocks
GPS/Atomic clocks
Radio clocks

Stratum 1
Take requests from lower level systems
Communicate with each other

Most requests for current time go to Stratum 2
Sanity check on each other to make sure they're all in sync

Most routers/mobile devices etc. connect here

ntpd
Network Time Protocol
Service that checks upstream time servers

ntpdate
query a specified NTP server and recieve a new time
Make sure NTP is stopped
^^ I have a similar command in my notes

ntpdate 1.pool.ntp.org

/etc/ntp.conf
Primary configuration file for ntpd

server syntax
server URL iburst
Sends several packets in a burst
Works through all defined servers  in conf file.

ntpq
query the ntpd daemon for information

Chronyd commands
timedatectl
Status of the system's configuration with an ntp server can be checked

chrond
Modern ntp daemon

/etc/chrony/chrony.conf
COnfiguration file for the chronyd daemon
Similar syntax to ntpd.conf

chronyc
Query chronyd daemon for information on upstream NTP servers

== System Logging ==
=== Legacy Logging Systems ===
Standard Linux Log Files
/var/log/dmesg
Linux kernel boot messages

/var/log/messages
Standard system log messages

/var/log/secure
Security log messges, containing information on login attempts

/var/log/maillog
Local email log messages (from and to server)

On systems that are not using systemd, these logs are managed by rsyslog
Legacy logging service

dmesg
Utility that allows an admin to view the /var/log/dmesg file in a text pager

logger
Command that can be used to send information to the /var/log/messages log file

tail, grep
Common commands that are used to peruse the log files on a Linux system

Logging Priority Levels
0 emerg system is unusable
1 alert action must be taken immediately
2 crit critical conditions
3 err error conditions
4 warn warning conditions
5 notice normal but significant condition
6 info informational
7 debug debug-level messages

dmesg -x --level=err, warn | less

Linux Logging Facilities
kern kernel messages
user random user-level messages
mail mail system
daemon system daemons
auth security/authorization messages
syslog messages generated internally by syslogd
lpr line printer subsystem
news network news subsystem

=== Rsyslog  ===
rsyslog configuration
/etc/rsyslog.conf
This is the main configuration file for the rsyslog logging daemon

/etc/logrotate.conf
This is the main configuration file for the logrotate daemon that is responsible for managing the storage and rotation of old log files

/etc/logrotate.d/
Extra logrotate configurations for other daemons can be placed here.

logrotate
the logrotate command will rotate logs based on the specified configuration file

logrotate config
/path/to/log_to_rotate {
  how often to rotate
  create PERMS owner group
  minsize SIZE_TO_ROTATE_AT
  rotate HOW_MANY_COPIES_TO_KEEP
}

=== Introduction to the systemd journal ===
Binary file that records everything that happens on a system
Kernel log messages
System log messages, same as syslog
System services that sent output to standard output and standard error
Audit records for SELinux messages

Default log at /run/log/journal
Doesn't persist on reboot

To make permanent:
mkdir -p /var/log/journal
systemd-tmpfiles --create --prefix /var/log/journal

Journal configuration
man 5 journald.conf
/etc/systemd/journald.conf
[Journal]
Storage=
auto, default. Stores data to /var/log/journal (if it exists) and /run/log/journal
persistent, data is stored to /var/log/journal hierarchy
volatile, data is only sent to /run/log/journal, resides in RAM
none, no data is kept, all log data is dropped

Compress=
Takes a Boolean value
yes, the default. Any data above a threshold are compressed
no, no data is compressed

SystemMaxUse=, RuntimeMaxUse=
How much RAM/disk space to use.
Default is 10%

SystemMaxFileSize=, RuntimeMaxFilesSize=
SystemMaxFileSize pertains to how large individual journal files may get. May have more than one journal file on system.
RuntimeMaxFileSize pertains to how large individual files can get while in RAM
Sizes can be in bytes of K, M, G, T, P or E

MaxRetentionSec=
How long to store entries
Size based is usually enough
Default is 0 (off)
Time can be set to a number followed by years, month, week, day, h or m. Default unit is seconds

=== Journalctl ===
journalctl flags
-r
Show newest entries first

-e
Jumps to end of page

-n
Shows the most recent entries and limits the amount of lines specified

-f
Shows the most recent log entries and follows the journal as new entries are created.
Similar to tail -f /var/log/messages

-u
Shows entries for unit specified

-o
Formats the output of the journal control command

verbose
Displays the journal with all of the entry intems with their fields

json-pretty
Formats the output in multi-line json format. Very useful for data analysis tools.

See man 7 systemd.journal-fields for explanation of fields in output

systemd-cat
Sends output of a command to the journal

-x
Show log lines with some text that comes from the message catalog.
Not all log entries will have explanatory text available.

-k
Show only kernel messages
Similar to dmesg command

-b
Shows all the journal entries that have been collected since them ost recent system boot up.

--list-boots
Show list of recorded boot sessions.
Journal must be persistent for this to be useful.

--since,--until
Show entries new than or until a date and time.
Date follows YYYY-MM-DD HH:MM:SS format
00:00:00 implied if no time passed.
Also uses text like "yesterday", "today", or "now".

--disk-usage
Displays the amount of disk space that the journal is consuming.

--rotate
Rotate the journal files.

=== Hands-on Lab: Working with System Service Log Files using the journal control ===
Introduction

Troubleshooting is an important part of working with services through systemd.
In this hands-on lab, we will learn how to view system service log files using the Journal Control utility.
At the end of this hands-on lab, you will know how to use the built-in journalctl utility to view and troubleshoot system services.

Check the status of the web service.
systemctl status httpd.service

Attempt to start the web service.
systemctl start httpd.service

After the service fails to start, check the journal.
journalctl -u httpd.service

Check the directory where the httpd configuration file should be.
ls /etc/httpd/conf

Restore the original httpd configuration file.
mv /etc/httpd/conf/httpd.conf.bkup /etc/httpd/conf/httpd.conf

Restart the service.
systemctl restart httpd.service

Verify That the Web Server Service Is Running

Check the status of the service.
systemctl status httpd.service

Navigate to the local web page.
elinks http://localhost

== Mail Transfer Agent (MTA) Basics ==
=== Basics of a Message Transfer Agent ===
Linux Message Transfer Agents (MTA)
MTA
Program (service) that routess email to its intended destination

MTA -> MDA (Port 25 TCP) -> MUA

Common MTA Systems
sendmail
One of the oldested MTA Systems
Hard to configure

postfix
Modern mta
Simpler to configure, great security

exim
Old default
Good security and easier to configure than sendmail

Sendmail emulation layer
System administrators can use sendmail commands on other MTAs as if they were managing a sendmail installation
mailq etc.

=== Email Forwarding and Aliases ===
Local Email Forwarding
/etc/aliases
plain text file that can be modified to set up forwarding addresses for users on a system

newaliases
After /etc/aliases file modified, newaliases will regenerate the /etc/aliases.db file MTA uses for mail delivery

Email commands
mail
command used to send an email to a user from the command line
Also used to view the email of a user on the system

mailq
used to view the email that resides in the email queue

~/.forward
local config used to forward email destined for user to send to another user or external email address

=== Hands-On Lab: Set up local email forwarding ===
Set up the Alias

First, let's switch to the root user:
[cloud_user@host]$ sudo su -

Run the following command to add an alias to all mail destined for the root user, so that it will instead get sent to the cloud_user account:
[root@host]# echo "root:   cloud_user" >> /etc/aliases

Re-generate the Aliases Database File
Run the following command to re-generate a new /etc/aliases.db file so that your new email alias rule gets registered:
[root@host]# newaliases

Send a Test Email
We need to generate an email to test your new forwarding rule.
This command will send a copy of the /etc/services file as an email attachment, along with the subject line "Just Testing", to the local root account:
[root@host]# mail -s "Just Testing" -a "/etc/services" root@localhost < /dev/null

We are using a null message body, as we are just checking for the attachment.
Read the Email, Then Remove It

Go back to the cloud_user account, and run the mail command to view the cloud_user's email message:
[root@host]# exit
[cloud_user@host]$ mail

The message sent from the root user should be in the list. Press the number corresponding to the message (typically 1) and then press Enter.
After we've finished reviewing the message (pressing the spacebar with scroll through the attachment), press q to close the message, then press d at the ampersand prompt (&) to delete the message.
Finally, press q to quit the mail application.

Conclusion
All of the mail destined for root will be forwarded now to cloud_user. That was our job, and we got it done. Congratulations!

== Manage Printers and printing ==
=== The Common Unix Printing System (CUPS) ===
CUPS
http://localhost:631
default URL for locally installed CUPS server
Requires a root login to add or remove printers

/etc/cups
Directory that contains the config files for the CUPS print server daemon and printer settings.
Preferable to use the web interface to manage the config files in the directory.

=== The Line Print Daemon ===
lpd Commands
lpstat
Displays the status of CUPS server and configured printers and queues.

lpadmin
Admin's tool to add, modify, and delete printers

lpinfo
Display available printer devices and drivers that can be used.

lpc
Older BSD-style command that can be used to view information about installed printers.
Status command will show the status of all installed printers.

lpr
Command sends a print job to the default printer.
To specify a different printers use the -P switch, followed by the printer name.

lpq
Command displays the CUPS printer queue. Use the -a option to view all print queues.

lprm
Command will remove a print job from the print queue. A job ID must be specified.
To remove all jobs pass a - to the command

=== Hands-On Lab: Working with the CUPS Print Server ===
Install a PDF Printer

Open your terminal application.
Check to see which printers are installed.
lpstat -s

Check to see what types of printer connections are available.
sudo lpinfo -v

Install a PDF printer to use with CUPS.
sudo lpadmin -p CUPS-PDF -v cups-pdf:/

Determine which driver files we can use with our printer by querying the CUPS database for files that contain "PDF".
lpinfo --make-and-model "PDF" -m

Use CUPS-PDF.ppd as the driver file.
sudo lpadmin -p CUPS-PDF -m "CUPS-PDF.ppd"

Run the lpstat command again.
lpstat -s

Check the status of the printer we just installed.
lpc status

Enable the printer to accept jobs, and set it up as the default printer.
sudo lpadmin -d CUPS-PDF -E
sudo cupsenable CUPS-PDF
sudo cupsaccept CUPS-PDF

Run the lpc status command again.
lpc status

The printer should now be ready.

Print a Test Page
Print a copy of the /etc/passwd file to a PDF file in our home directory.
lpr /etc/passwd

Verify that there is a copy of the /etc/passwd file in the home directory.
ls

Modify the Printer and Work with the Print Queue
Configure the printer so that it will not accept any new jobs.
sudo cupsreject CUPS-PDF
Verify the status of the printer.

lpc status

Attempt to print the /etc/group file to the printer.
lpr /etc/group

You should receive a message that says the printer is not currently accepting jobs.
Reconfigure the printer to once again accept incoming jobs.
sudo cupsaccept CUPS-PDF

Check the status of the printer.
lpc status

Configure the printer so that it accepts jobs to its queue but will not print them.
sudo cupsdisable CUPS-PDF

Check the status of the printer.
lpc status

Attempt to print the /etc/group file again.
lpr /etc/group

List the contents of the /home directory.
ls

Check the printer's queue.
lpq

Remove the job from the printer's queue (remember to substitute the job ID from your command's output).
lprm <JOB_ID>

Verify that the job was successfully removed from the printer's queue.
lpq

Re-enable the printer's ability to print new jobs.
sudo cupsenable CUPS-PDF

Verify that the CUPS-PDF printer is once again ready to accept new jobs.
lpq

== Fundamentals of internet protocols ==
=== Networking Fundamentals ===
Internet Protocol
IP
Address assigned to a maching so that other machines can communicate with each other
IPv4 and IPv6
four octets
128 bit hexadecimal

Transmission Control Protocol: TCP
Provides mechanism used to send traffic
Relies on send and acknowledgement system with it's data packets
Each package includes an order number for order

User Datagram Protocol: UDP
Sends packet without verifying
Less overhead

Internet Control Message Protocol: ICMP
Query a network device to check availability
ping, traceroute

IP Class Ranges
RFC 1918
Five ranges and how many hosts
| Class | Range   | Number of Hosts         |
| A     | 1-126   | 16,777,214              |
| B     | 128-191 | 65,534                  |
| C     | 192-223 | 254                     |
| D     | 224-239 | Reserved for multicast  |
| E     | 240-254 | Reserved for future use |

Network Mask
Defines a logical network (subnet) that indicatess a range of IP addresses
Associated network and subnet mask
CIDR
Class A: 255.0.0.0/8
Class B: 255.255.0.0/16
Class C: 255.255.255.0/24

Private IP Address Ranges
Used for internal networks
Not publicly routable, only routes in internal network
| IP Address Range              | Number of Hosts | CIDR Notation  | Classful Description            |
| 10.0.0.0 - 10.255.255.255     | 16,777,216      | 10.0.0.0/8     | Single class A network          |
| 172.16.0.0 - 172.31.255.255   | 1,048,576       | 172.16.0.0/12  | 16 contiguous class B networks  |
| 192.168.0.0 - 192.168.255.255 | 65,536          | 192.168.0.0/16 | 256 contiguous Class C networks |

Network Gateway and Broadcast Address
Where traffic goes that has no matching route or that is not intended for the local network

Broadcast Address IP used to broadcast to all hosts on a particular network

=== Common Networking Services ===
Look at /etc/services for a list of various network services 
Know the following:
* FTP
* SSH
* telnet
* SMTP
* DNS
* HTTP
* POP
* NTP
* NETBIOS (for Samba) 
* IMAP
* SNMP
* SNMP Trap
* LDAP
* HTTPS
* SMTPS
* Syslog
* LDAPS
* IMAPS
* POP3S

TODO
== Persistent Network Configuration ==
=== NetworkManager ===
=== Legacy Networking Tools ===

TODO
== Basic Network Troubleshooting ==
=== Testing Connectivity ===
=== Hands-On Lab: Monitoring Network Access ===
Introduction

Understanding networking concepts is a more advanced concept for most system administrators, but it is essential to being successful.
In this activity, the we will use the netcat (nc) utility to generate network traffic between two servers and view that traffic's appearance in a tool called iptraf-ng.

The Scenario

During the development of a new Web-based API our team is working on, they have discovered that they are receiving intermittent network disconnects from clients, even when they are local to the network of the server itself.

We have been provided credentials and access information for two CentOS 7 systems in their environment.
They have asked for us to install tools that they can use to monitor network traffic between the two systems.

We'll have to install the tools we need and create traffic on port 2525 from server2 to server1. We want to get all network traffic sent to /home/cloud_user/traffic_log.txt.
Logging In

Use the credentials in the hands-on lab overview page to log into the provided servers.
It will be easier to have a terminal or two open for each server at the same time.
We're going to be root right off, so as soon as we get logged in we'll want to run a quick sudo su in each one.
Install Client Utilities

We've got to install the two packages that the team will use to generate and monitor traffic. Let's use YUM to get it done:
[root@server1]# yum install iptraf-ng nc

Repeat this on the other server:
[root@server2]# yum install iptraf-ng nc

Create the Traffic Log File
On the first server, let's run iptraf-ng and go under Configure...
In the menu, don't forget this isn't a menu we control with a mouse -- it's all keyboard.
Make sure Logging is toggled to On. Set the log file path to: /home/cloud_user/traffic_log.txt.
Then go into IP traffic monitor. In the next menu, select ens5. Once we press Enter the logging will start.
Listen for Traffic

Let's open a second terminal into server1 and run sudo su right off.
Once we're there, we're going to start netcat listening on post 2525 with this:
[root@server1]# nc -l 2525

Send Some Traffic

Now, let's start talking.
Back in the server2 window we've got open, send netcat traffic to server1 with this (where x.x.x.x is the internal IP of server1 that we'll see on the hands-on lab overview page):
[root@server2]# nc x.x.x.x 2525

We'll just land at a blinking cursor below the prompt, but we can type a message there and press Enter.
Once we do, it will show up back in the window we're listening in on server1. A bunch of messages sent from server2 would look like this:

[root@server2]# nc x.x.x.x 2525
test
test
testing
This is a test

On server1, they would look like this when they arrive:
[root@server1]# nc -l 2525
test
test
testing
This is a test

That should be enough traffic for what we're doing.
On server2, press Ctrl + C to kill the nc command we've got running and flip back over to the terminal we were running iptraf-ng in.
Press x to stop the monitoring and get out, then choose Exit from the main menu.
Examine the Log

On server1, if we run ls /home/cloud_user we should see traffic_log.txt listed in the output. Read that to see if it was capturing what we need:
[root@server1]# less /home/cloud_user/traffic_log.txt

We should see some log entries showing traffic going from server2 to server1 on port 2525.
Conclusion

We did it. We've got all of the tools in place. There's a tool listening for traffic, and one logging it. We've done our job, and our development team can take things from here. Congratulations!

TODO
== Configure Client-Side DNS ==
=== The basics of DNS Resolution from Linux ===
=== Hands-On Lab: Testing DNS Resolution ===
Testing DNS Resolution

In this hands-on lab, we will utilize the nmcli utility to configure our DNS resolution.
Please note, the use of eth0 in the video has been replaced with ens5.
Before We Begin

Open a terminal session, and log in via SSH using the credentials provided on the lab page.
Review Current DNS Configuration

See if the system can resolve hostnames to IP addresses:
host www.google.com

Note that the command times out.

Check to see what DNS server entries we have in the /etc/resolv.conf file:
cat /etc/resolv.conf

Note that we do not have any DNS entries listed.
Review our network connections:
nmcli con show

Our default connection name should be System ens5. Review our DNS IP settings:
nmcli -f ipv4.dns con show "System ens5"

This system obviously does not have any DNS servers configured for use.
Configure Your System to Use Your Network's DNS
Modify the system's default connection to use the network's DNS server:
sudo nmcli con mod "System ens5" ipv4.dns "10.0.0.2"

Verify the settings using the nmcli command and then checking the /etc/resolv.conf file:
nmcli -f ipv4.dns con show "System ens5"

cat /etc/resolv.conf

We need to reactivate the system's network connection for the change to take effect:
sudo nmcli con up "System ens5"

Verify our settings once more:
cat /etc/resolv.conf

Now, attempt to resolve a hostname to an IP address:
host www.google.com

Our system should be able to resolve an IP address for the domain name.

TODO
== Perform Security Administration Tasks ==
=== Determine the Current Security State of a System ===
=== Checking Local Network Security ===
=== Hands-On Lab: Create New sudo Users ===
Introduction

In this hands-on lab, we'll create new users that will be granted varying degrees of sudo access.
Solution

Open a terminal session, and log in via SSH using the credentials provided on the lab page.
Create Two New Users
Create a gfreeman user on the system:
sudo useradd -m gfreeman

Create an avance user, and assign it to the wheel supplemental group:
sudo useradd -G wheel -m avance

Set the password for both accounts to LASudo321:
sudo passwd gfreeman
sudo passwd avance

Verify the /etc/sudoers File and Test Access

Verify that the /etc/sudoers file will allow the wheel group access to run all commands with sudo:
sudo visudo

Note that there should not be a comment (#) on this line of the file:
%wheel  ALL=(ALL)       ALL

Switch to the avance account, and use the dash (-) to utilize a login shell:
sudo su - avance

Attempt to read the /etc/shadow file at the console:
cat /etc/shadow

Rerun the command with the sudo command:
sudo cat /etc/shadow

After you have verified avance can read the /etc/shadow file, log out of that account:
exit

Set Up the Web Administrator
Create a new sudoers file in the /etc/sudoers.d directory that will contain a standalone entry for webmasters:
sudo visudo -f /etc/sudoers.d/web_admin

Enter in the following at the top of the file:
Cmnd_Alias  WEB = /bin/systemctl restart httpd.service, /bin/systemctl reload httpd.service

Add another line in the file for gfreeman to be able to use the sudo command in conjunction with any commands listed in the WEB alias:
gfreeman ALL=WEB

Save and close the file with :wq!.

Next, log in to the gfreeman account:
sudo su - gfreeman

Attempt to restart the web service:
sudo systemctl restart httpd.service

Try to read the new web_admin sudoers file:
sudo cat /etc/sudoers.d/web_admin

Since the cat command is not listed in the command alias group for WEB, gfreeman cannot use sudo to read this file.

TODO
== Set up Host Security ==
=== Securing Local Logins ===
=== Securing Network Services ===
=== Hands-On Lab: Host Security with TCP Wrappers and Systemd Sockets ===
Introduction

A Linux system administrator is responsible for keeping their servers secure.
There are a multitude of tools and software packages available to keep a networked Linux system safe from malicious intruders.
In this hands-on lab, we will learn how to move away from always-on services to those that use systemd socket units.
Socket units only provide access to a network service when an incoming connection requests it.
To further enchance the security of the service, we will apply TCP wrappers to allow incoming connections to a specified service.
Connecting to the Lab

Open your terminal application, and run the following command. (Remember to replace <PUBLIC_IP> with the public IP you were provided on the lab instructions page.)

ssh cloud_user@&lt;PUBLIC_IP&gt;

Enter your password at the prompt.
Configure sshd to use Sockets

Verify that the sshd.socket unit is not active.
systemctl status sshd.socket

Set up an at job that stops the sshd.service unit and starts sshd.socket.
sudo at now + 3 minutes

Enter your password at the prompt.
Add the following:
at> systemctl stop sshd.service
at> systemctl start sshd.socket

Press Ctrl + D to end the at job configuration.
Verify that the sshd.socket unit is active and running.
systemctl status sshd.socket

Enable the socket for SSH and disable the service for SSH.
sudo systemctl enable sshd.socket
sudo systemctl disable sshd.service

Set Up TCP Wrappers to Only Allow SSH
Verify that the sshd server has been compiled to use TCP wrappers.
ldd /usr/sbin/sshd | grep libwrap

Edit the /etc/hosts.allow file.
sudo vim /etc/hosts.allow

Add the following line to the file:
sshd2 sshd : ALL

Edit the /etc/hosts.deny file.
sudo vim /etc/hosts.deny

Add the following line to the file:
ALL : ALL

Exit the SSH session.
exit

Reconnect to the secure shell session.
ssh cloud_user@&lt;PUBLIC_IP&gt;

Enter your password at the prompt.

TODO
== Securing Data with Encryption ==
=== GPG ===
=== SSH ===
=== Hands-On Lab: Encrypt a File using GPG ===
Introduction

A Linux system administrator is responsible for keeping their servers secure.
There are a multitude of tools and software packages available to keep a networked Linux system safe from malicious intruders.
In this hands-on lab, we will learn how to move away from always-on services to those that use systemd socket units.
Socket units only provide access to a network service when an incoming connection requests it.
To further enchance the security of the service, we will apply TCP wrappers to allow incoming connections to a specified service.
Connecting to the Lab

Open your terminal application, and run the following command. (Remember to replace <PUBLIC_IP> with the public IP you were provided on the lab instructions page.)
ssh cloud_user@&lt;PUBLIC_IP&gt;

Enter your password at the prompt.
Configure sshd to use Sockets

Verify that the sshd.socket unit is not active.
systemctl status sshd.socket

Set up an at job that stops the sshd.service unit and starts sshd.socket.
sudo at now + 3 minutes

Enter your password at the prompt.
Add the following:
at> systemctl stop sshd.service
at> systemctl start sshd.socket

Press Ctrl + D to end the at job configuration.
Verify that the sshd.socket unit is active and running.
systemctl status sshd.socket

Enable the socket for SSH and disable the service for SSH.
sudo systemctl enable sshd.socket
sudo systemctl disable sshd.service

Set Up TCP Wrappers to Only Allow SSH
Verify that the sshd server has been compiled to use TCP wrappers.
ldd /usr/sbin/sshd | grep libwrap
Edit the /etc/hosts.allow file.
sudo vim /etc/hosts.allow

Add the following line to the file:
sshd2 sshd : ALL
Edit the /etc/hosts.deny file.
sudo vim /etc/hosts.deny

Add the following line to the file:
ALL : ALL

Exit the SSH session.
exit

Reconnect to the secure shell session.
ssh cloud_user@&lt;PUBLIC_IP&gt;

Enter your password at the prompt.

=== Hands-On Lab: Generating and Exchanging SSH Keys for Secure Access ===
Introduction

Understanding the creation and exchange of SSH keys is a key concept to grasp as a new system administrator.
In this lab, we will generate keys on two systems using the ssh-keygen utility and learn how to exchange and verify the keys with a remote system using ssh-copy-id and associated key files on each.
At the end of this lab, you will understand how to create secure keys for remote access, how to exchange them, and where to store them on each system involved in the chain.
Create the SSH Keys on Server 1 and Server 2
Create the Key on Server 1

In your terminal, log in to Server 1.
ssh cloud_user@&lt;SERVER1_PUBLIC_IP&gt;

List the contents of the current directory.
ls -la

Change to the .ssh directory.
cd .ssh

List the contents of the .ssh directory.
ls -la

Generate a key for Server 1.
ssh-keygen

Press Enter at the next three prompts.

List the contents of the .ssh directory again.
ls -la

List the contents of the id_rsa.pub file.
cat id_rsa.pub

Copy the output of this command to your clipboard.
Create the Key on Server 2
Log in to Server 2.
ssh cloud_user@&lt;SERVER2_PUBLIC_IP&gt;

Change to the .ssh directory.
cd .ssh/

List the contents of the .ssh directory.
ls -la

Install the nano text editor.
sudo yum install nano

Enter your password at the prompt.

Open the authorized_keys file in nano.
nano authorized_keys

Add the key we just generated to the file. (Note: We don't see the other accounts shown in the video, but it won't impact the lab activity.)
Press Ctrl + X.

Press Y and then Enter to save the changes.

Exchange the SSH Keys between the Servers
In your Server 2 terminal window, create a new key.

ssh-keygen

Press Enter for the next three prompts.

List the contents of the current directory.
ls -la

List the contents of the id_rsa.pub file.
cat id_rsa.pub

Copy the output of this command to your clipboard.

Type exit to log out of Server 2.

Install nano.
sudo yum install nano

Type y to continue.

List the contents of the current directory.
ls -la

Open the authorized_keys file in nano.
nano authorized_keys

Add the key we just generated to the file.
Press Ctrl + X.

Press Y then Enter to save the changes.
Test the Configuration

Attempt to log in to Server 2 from Server 1 without a password.
ssh cloud_user@&lt;SERVER2PUBLIC_IP&gt;

Attempt to log in to Server 1 from Server 2 without a password.
ssh cloud_user@&lt;SERVER1PUBLIC_IP&gt;
