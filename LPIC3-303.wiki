[[index|back]]

= LPIC-3 303: Security =
== Cryptography Concepts Part 1 ==
Cryptography Concepts
PKI and Trust Chains
Creating and working with certificates
Operating a Certificate Authority

What is Cryptography?
Practice and study of techniques for secure communication in the presence of third parties called adversaries

Computational context
Symmetric or assymetric encryption

Protecting data from untrusted third parties
Ensure data between parties is authentic

Encryption is how we can pass info across channels without compromising the content or integrity of the data

Uses of Cryptography
Data Encryption
Cipher to render data unreadable

Data Integrity
Make sure what we send is what they receive
Make sure it's not tampered or at least alert if it was

Authentication
Confirm we are who we say we are

Two primary elements to cryptography
Key
Used to encrypt data
Like a password
Must be secret
Can be multiple keys in some situations
Needs to be kept private

Algorithm
Method of encryption
Takes plain text data and makes it unreadable to third party
Also unencrypts data
May be public
Need to know how to use key
Examples: 3DES, blowfish, AES

A cipher (algorithm) is used to scramble information

Ciphertext may be deciphered (unencrypted) with a key

Two types of encryption
Symmetric and Asymmetric encryption

== Cryptography Concepts Part 2 ==
Symmetric Encryption:
Only one key
Both parties must know key
Generally faster than asymmetric encryption

Example algorithms: Blowfish, AES

Asymmetric
Two keys
Encryption is public
Decryption key is private

^^ SSH key

Example algorithms: RSA, DSA

Good for digital signatures, key distribution and digital certificates

Data Integrity through hashes
Hash converts a string of any length to an output string of fixed length

Each string provides a unique hash

Hashing is generally used one way

A salt may be used to improve security

Add random text to ciphertext to improve security
Don't have just hash to crack, need to handle random data as well

Common hashing algorithms,
crc-32 (don't use, insecure), md5, sha-1 (most common)

If file is modified md5 sum changes

== PKI and Trust Chains ==
PKI = Public Key Infrastructure

Use ID, Gov't and airline as an example
ID to verify who you are to airline
Gov't provisioned ID, valid institution

PKI is made up of a hierarcy of Certificate Authorities (CA) and a Certificate Signing Request (CSR) process

Root Trusted
Top level CA
Client

CA
Trusted third party that validates the authenticity of a public key
Root trusted CA that signs and vets CA certificates
By trusting a CA cert you ctrust all certs signed by that CA

CSR are essentially public keys that are generated and submitted to a CA to be signed
When a CA signs a CSR it produces a certificate that is trusted by the signing CA
CA can also invalidate a cert if needed by using either OCSP (Online Certificate Status Protocol) or by using a CRL (Certificate Revocation List)
CRL almost completely deprecited in favor of OCSP

== Request, Sign, and Manage Certificates ==
Creating and working with certificates

Creating a private key
openssl genrsa -ALGORITHM -out KEY KEYSIZE
openssl genrsa -aes128 -out mykey.pem 2048

Generating a self-signed cert (public key)
openssl req -utf8 -new -key KEY -x509 -days LIFESPAN -out CERT

Display certificate
openssl x509 -in CERT -text -noout

Creating a CSR
openssl req -new -key PRIVKEY -out CSR

The openssl command creates PEM formatted files by default.
Other formats,
DER - A binary form of ASCII PEM
P7B/PKCS#7 - Base64 encoded ASCII popular in Windows
PFX/PKCS#12 - A binary format capable of storing keys, certs and intermediary certs together.

Openssl command can convert between formats.
Check x509, rsa, pkcs7 or pkcs12 man pages.
Doesn't work with all formats.

== Operating a Certificate Authority ==
== X.509 Certificates and Public Key Infrastructures ==
== SSL, TLS, and Apache HTTPD Server ==
== The ssl.conf File: Important Directives and Security Focused Configurations ==
== Understanding SNI and HSTS ==
== Using the openssl Command to Work with Certificates and Web Servers ==
== Working with OpenSSL and Httpd ==
== 325.2 X.509 Certificates for Encryption, Signing and Authentication ==
== Creating Encrypted Volumes ==
== Demo: Working with LUKS ==
== Disk Encryption with eCryptfs ==
== Working with DNS ==
== Securing DNS with DNSSEC ==
== Understanding DANE ==
== Kernel Security Part 1 ==
== Kernel Security Part 2 ==
== Securing Grub ==
== Linux Kernel Security ==
== Threat Detection ==
== Working with Maldet ==
== Understanding Rootkits ==
== System Auditing in Linux ==
== Working with the Audit Log ==
== Linux Login Essentials ==
== PAM Concepts ==
== Kerberos Concepts ==
== Understanding SSSD ==
== Configuring PAM ==
== Configuring SSSD ==
== Overview of FreeIPA ==
== Installing and Configuring FreeIPA ==
== Working with FreeIPA ==
== Working with FreeIPA ==
== Basic System Permissions ==
== Extended Attributes ==
== Using ACLs ==
== Managing File Attributes and Permissions ==
== Understanding MAC ==
== SELinux ==
== AppArmor and Smack: MAC alternatives ==
== Troubleshooting SELinux ==
== NFSv4 Improvements ==
== NFS in Practice ==
== NFS4 ACLs ==
== CIFS Configuration ==
== Exporting an NFSv4 Volume with ACLs ==
== Configuring FreeRADIUS ==
== Analyzing Network Traffic ==
== Network Utilities and Threats ==
== Packet Capture and Analysis ==
== Network Monitoring ==
== Configure and Use Snort ==
== OpenVAS Overview ==
== Firewall Concepts ==
== Advanced Firewall Concepts ==
== Ebtables and Nftables ==
== Working with IP Sets and iptables ==
== OpenVPN ==
== IPSec Concepts ==
== Working with OpenVPN (and iptables) ==
