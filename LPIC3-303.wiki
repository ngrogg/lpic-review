[[index|back]]

= LPIC-3 303: Security =
== 325.1 X.509 Certificates and Public Key Infrastructures ==
=== Cryptography Concepts Part 1 ===
Cryptography Concepts
PKI and Trust Chains
Creating and working with certificates
Operating a Certificate Authority

What is Cryptography?
Practice and study of techniques for secure communication in the presence of third parties called adversaries

Computational context
Symmetric or assymetric encryption

Protecting data from untrusted third parties
Ensure data between parties is authentic

Encryption is how we can pass info across channels without compromising the content or integrity of the data

Uses of Cryptography
Data Encryption
Cipher to render data unreadable

Data Integrity
Make sure what we send is what they receive
Make sure it's not tampered or at least alert if it was

Authentication
Confirm we are who we say we are

Two primary elements to cryptography
Key
Used to encrypt data
Like a password
Must be secret
Can be multiple keys in some situations
Needs to be kept private

Algorithm
Method of encryption
Takes plain text data and makes it unreadable to third party
Also unencrypts data
May be public
Need to know how to use key
Examples: 3DES, blowfish, AES

A cipher (algorithm) is used to scramble information

Ciphertext may be deciphered (unencrypted) with a key

Two types of encryption
Symmetric and Asymmetric encryption

=== Cryptography Concepts Part 2 ===
Symmetric Encryption:
Only one key
Both parties must know key
Generally faster than asymmetric encryption

Example algorithms: Blowfish, AES

Asymmetric
Two keys
Encryption is public
Decryption key is private

^^ SSH key

Example algorithms: RSA, DSA

Good for digital signatures, key distribution and digital certificates

Data Integrity through hashes
Hash converts a string of any length to an output string of fixed length

Each string provides a unique hash

Hashing is generally used one way

A salt may be used to improve security

Add random text to ciphertext to improve security
Don't have just hash to crack, need to handle random data as well

Common hashing algorithms,
crc-32 (don't use, insecure), md5, sha-1 (most common)

If file is modified md5 sum changes

=== PKI and Trust Chains ===
PKI = Public Key Infrastructure

Use ID, Gov't and airline as an example
ID to verify who you are to airline
Gov't provisioned ID, valid institution

PKI is made up of a hierarcy of Certificate Authorities (CA) and a Certificate Signing Request (CSR) process

Root Trusted
Top level CA
Client

CA
Trusted third party that validates the authenticity of a public key
Root trusted CA that signs and vets CA certificates
By trusting a CA cert you ctrust all certs signed by that CA

CSR are essentially public keys that are generated and submitted to a CA to be signed
When a CA signs a CSR it produces a certificate that is trusted by the signing CA
CA can also invalidate a cert if needed by using either OCSP (Online Certificate Status Protocol) or by using a CRL (Certificate Revocation List)
CRL almost completely deprecited in favor of OCSP

=== Request, Sign, and Manage Certificates ===
Creating and working with certificates

Creating a private key
openssl genrsa -ALGORITHM -out KEY KEYSIZE
openssl genrsa -aes128 -out mykey.pem 2048

Generating a self-signed cert (public key)
openssl req -utf8 -new -key KEY -x509 -days LIFESPAN -out CERT

Display certificate
openssl x509 -in CERT -text -noout

Creating a CSR
openssl req -new -key PRIVKEY -out CSR

The openssl command creates PEM formatted files by default.
Other formats,
DER - A binary form of ASCII PEM
P7B/PKCS#7 - Base64 encoded ASCII popular in Windows
PFX/PKCS#12 - A binary format capable of storing keys, certs and intermediary certs together.

Openssl command can convert between formats.
Check x509, rsa, pkcs7 or pkcs12 man pages.
Doesn't work with all formats.

=== Operating a Certificate Authority ===
Understangind CAs
What makes a CA is really a unique key pair

A CA public key is typically signed by another CA that is trusted

Three primary reponsibilities
Sign valid CSRs
Maintain security of their private key
Revoke compromised or misused certificates

Operating a CA
Creating a private key
openssl genrsa -ALGORITHM -out KEY KEYSIZE
openssl genrsa -aes128 -out mykey.key 2048

Generating a self-signed certificate (public key)
openssl -utf8 -new -key KEY -x509 -days LIFESPAN -out CERT

Add -set_serial SERIAL for a CA certificate

Signing a CSR as a CA (requires CA keys)
openssl ca -in CSR -out CRT

== 325.2 X.509 Certificates for Encryption, Signing and Authentication ==
=== SSL, TLS, and Apache HTTPD Server ===
SSL, TLS, and common Transport Security Layer Threats
Working with Apache's mod_ssl
Troubleshooting using openssl

SSL stands for Secure Sockets Layer
SSL was the original protocol for securing web traffic
Latest version is SSLV3 which is deprecated
It should not be used

TLS for Transport Layer Security
TLS successor to SSL begginning with TLS 1.0
TLS 1.2 is the current standard
TLS 1.3 proposed as new standard

Transport Layer Security
TLS and SSL aim to address the issue of secure communication over a public network
protocols meet the following needs
Securely encrypt exchanged data
Authenticate at least one part
Ensure data integrity
Prevent replay attacks

TLS achieves this through the use of PKI as well as general encryption practice

"Man in the middle" style attacks can be a threat to TLS.
Attack third party intercepts and/or alters data between parties
Use TLS 1.2 or newer as soon as feasible
Encrypt all traffic
Each TLS update, vulns like POODLE and BEAST are patched and weak ciphers are deprecated
Some security measures do lie with the client (not using bank website on public wifi)

=== The ssl.conf File: Important Directives and Security Focused Configurations ===
Working with mod_ssl
Secure http traffic with PKI:
SSLCertificateFile CERT
SSLCertificateKeyFile KEY

Authenticate with a client certificate:
SSLVerifyClient require
SSLVerifyDepth 1
SSLCACertificateFile CACERT

Configure Cipher usage:
SSLCipherSuite HIGH:!aNULL:!MD5

OCSP Stapling:
SSLUseSXtapling On
SSLStaplingCache "shmcb:logs/ssl_stapling(32768)"

=== Understanding SNI and HSTS ===
Apache and mod_ssl
Server name Indication (SNI)
Only able to bind a cert to a single socket
One cert for every IP/port combo

Starting with Apache 2.2.12 and OpenSSL 0.9.8j
It's possible to have many certs on the same socket
Allows the use of name-based virtual hosts with unique certificates
SSLStrictSNIVHostCheck
Directive for SNI
On or off
Non-SNI clients able to use SNI virtualhosts
Can cause issues

HTTPS Strict Transport Security (HSTS)
HSTS is a way to encourage encryption for an entire domain rather than select parts
Special header is sent by teh web server which instructs the browser to direct all traffic over SSL

header always set Strict-Transport-Security "max-age=300; includeSubDomains;preload".

max age important, what tells browser how long to operate
When cutting over a legacy website you might need to roll back
TTL
Want to start with a low number
If it goes sideways browser will check on a non-secure port
Preload
List of known hsts website
Tells browser to treat site as a known HSTS website

=== Using the openssl Command to Work with Certificates and Web Servers ===
More on openssl
Establish a secure connection:
openssl s_client -connect HOST

Validate a trust chain:
openssl verify -verbose CERT

View Certificate details:
openssl x509 -text CERT

=== Hands-On Lab: Working with OpenSSL and Httpd ===
Open your terminal application, and run the following command (remember to replace <PUBLIC_IP> with the public IP you were provided on the lab instructions page):
ssh cloud_user@&lt;PUBLIC_IP&gt;

Type yes at the prompt.
Enter your cloud_user password at the prompt.

Install mod_ssl on the Host webserver
Log in to the webserver host.
ssh webserver
Escalate privileges to root.
sudo su -

Install mod_ssl.
yum install -y mod_ssl

Generate and Sign a Private Key
Change to the /tls/ directory.
cd /etc/pki/tls/

Create a new encrypted private key.
openssl genrsa -aes128 -out private/httpdkey.pem

Enter httpd at the next two passphrase prompts.
Generate a self-signed certificate using the encrypted private key.
openssl req -new -x509 -key private/httpdkey.pem -out certs/httpdcert.pem -days 365

Enter httpd at the passphrase prompt.
At the next prompt, enter the following information:
Country Name: US
State or Province Name: Texas
Locality Name: Dallas
Organization Name: Example Corp
Common Name: shop.example.com
Email Address: webmaster@example.com

Configure the Default Apache Virtual Host
Edit /etc/httpd/conf.d/ssl.conf.
vim /etc/httpd/conf.d/ssl.conf

Type /Virtual to search for the SSH Virtual Host Context section.
At the end of the <VirtualHost _default_:443> section, add the following on a new line:
ServerName shop.example.com:443

Type /SSLCert to search for the Server Certificate section.
Locate the line SSLCertificateFile /etc/pki/tls/certs/localhost.crt, and change it to the following:
SSLCertificateFile /etc/pki/tls/certs/httpdcert.pem

Locate the line SSLCertificateKeyFile /etc/pki/tls/private/localhost.key, and change it to the following:
SSLCertificateKeyFile /etc/pki/tls/private/httpdkey.pem

Press Esc, then type :wq to exit the vim text editor.
Restart the Apache httpd server.
systemctl restart httpd

Enter httpd at the passphrase prompt.
Open port 443 on the OS firewall.
firewall-cmd --add-service=https --permanent

Reload the firewall.
firewall-cmd --reload

Verify the Configuration

Press Ctrl + D twice to log out of webserver and return to workstation.
Verify that the configuration is working properly.
openssl s_client -connect shop.example.com:443

Press Ctrl + C to return to the command prompt.
Write the s_client output to a file.
openssl s_client -connect shop.example.com:443 > /home/cloud_user/httpd_output

List the contents of the file to verify that the certificate information is there.
cat /home/cloud_user/httpd_output

== 325.3 Encrypted Files Systems ==
=== Creating Encrypted Volumes ===
Disk Encryption Concepts
File System Encryption with eCryptfs
Working with LUKS

Use cases of disk encryption
Protect data at rest
Protect removable media
Add additional data security such as an onboard drive

Methods of disk encryption
Block device - LUKS
File system level - eCryptfs

Disk encryption tools
em-encrypt and luks
cryptmount
eCryptfs
EncFS

Disk Encryption with eCryptfs and EncFS
eCryptfs provides file system level encryption
Uses ecryptfs package
Mount a new directory using the ecryptfs type
PAM module provided for automatic mounting options
ecryptfs-utils provides helper utilities
EncFS is similar but targets non-superusers
Allows for creation of encrypted repos by standard users

=== Demo: Working with LUKS ===
Working with LUKS
Create encrypted volumes
cryptsetup luksFormat DEVICE
cryptsetup luksOpen DEVICE mapping

mapping can be anything you'd like, it's a name

Luks Keys
Example LUKS key
dd if=/dev/urandom of=/root/lukskey bs=4096 count=1
cryptsetup luksAddKey DEVICE keyfile

Mount on boot with Crypttab
/etc/crypttab
mapping DEVICE keyfile filesystemtype (luks)

/etc/fstab

mount -a will not work
Must reboot

=== Hands-On Lab: Disk Encryption with eCryptfs ===
Install eCryptfs

Run the following command:
sudo apt-get install ecryptfs-utils

Type y at the prompt.

Configure /opt/protected as an Encrypted Mount
Ensure that the /opt/protected directory exists.
ll /opt/

Encrypt the file system.
sudo mount -t ecryptfs /opt/protected /opt/protected

Type supersecret! at the passphrase prompt.
Press Enter to accept the default options at the next two prompts.
Type y to accept the defaults at the next two prompts.
Type yes at the next two prompts.

Copy the Contents of /etc/profile.d to /opt/protected
Run the following command:
sudo cp /etc/profile.d/* /opt/protected/

Verify that the file is readable.
cat /opt/protected/apps-bin-path.sh

Re-encrypt /opt/protected and Verify that the Contents of the Directory Are Unreadable
Unmount the file system.

sudo umount /opt/protected

Attempt to view the contents of one of the files in /opt/protected.
cat /opt/protected/apps-bin-path.sh

== 325.4 DNS and Cryptography ==
=== Working with DNS ===
Working with DNS
Securing DNS with DNSSEC
DNS is short for Domain Name System
DNS is a hierarchical system used to resolve hostnames
Starts with a root server that branches
Resolves attempt to lookup hostnames against local forwarders if configured
Resolvers will go directly to the root name server which delegates
Zones and resource records
DNS configurations are made up of zones and resource records (RRs)
Consist of a type and a series of labels that make up domains, subdomains, hosts etc.

EDNS proposed
Extension for DNS
Documented in RFC 2671
Address backwards compatibility for older versions of DNS

BIND is a popular implementation of a DNS server
Primary config is /etc/named.conf
Objectives on LPIC exam 303 cover securing DNS with BIND in particular

Securing BIND
Means of securing DNS
TSIGs - a method of digitally signing data provided to a resolver or data sent in a zone transfer.
DNS poisoning can occur without TSIGs
Running a named server in a chroot jail
Restrict access
Configuration directives
Allow query
Recursion
Prevent DNS from reaching out to other servers
Allow Transfer
What DNS servers are allowed to transfer zones

RNDC stands for Remote Name server Daemon Control
Allows for remote name server management
Remote control for bind
Secure with a key
Must be secured using a secret key that is shared with the BIND server.

BIND Configuration
Directives:
allow query
recursion
allow transfer

DNS utilities
dig
New version called delv

=== Securing DNS with DNSSEC ===
What is DNSSEC?
Domain Name System Security Extension
DNSSEC guarantees the authenticity of Zone Transfers and RR lookups.
Resource Record
Security by digitally signing zone files to sensure they have not been altered or spoofed.

Enabling DNSSEC
Dnssec-enable and dnssec-validation in named.conf
On by default

Must create Zone Singing Keys (ZSKs), Key signing Keys (KSKs) and have your registration publish a Delegations Signer (DS) record for your domain

Zone Signing Keys (ZSK)
Signs a particular zone file.
Generated using dnssec-keygen.
Should be rotated on a monthly interval for optimal security
Can be cronned

Key signing keys (KSK)
What authenticate your servers' ZSKs
Created using dnssec-keygen but with -f KSK parameter

Dnssec-signzone
Generated key records are placed in a zone file
dnssec-signzone creates a signed zone file for use with BIND.

Chain of Trust
KSKs are provided and published by the parent of a child zone
This continues all the way to the root dns servers which have their KSK signed in a key signing ceremony

Other commands to understand
dnssec-settime - Manages the validity period of a given key
dnssec-dsfromkey - Used to generate the DS RR for a given KSK
Review the man pages

DO and AD bits
Contained in DNS queries and responses.
DO stands for DNSSEC OK and indicates taht a client will understand a DNSSEC response.
AD stands for Authenticated Data and is set when data returned by a server that is authenticated with DNSSEC

=== Understanding DANE ===
DNS-Based Authentication of Named Entities
Domain Name System Security Extension
DNSSEC guarantees the authenticity of Zone Transfers and RR lookups.
Digitally signing zone files to ensure they hve not been altered or spoofed.
TLSA record
A TLS A record
\_port\_.protocol
Note the port and protocol designation in the label
Fully qualified domain name
TLSA Record are not limited to HTTPS, replace with other ports to use with other services

== 326.1 Host Hardening ==
=== Kernel Security Part 1 ===
Kernel Security
Securing Grub
Disabling unnecessary software
Smaller attack surface
All running software is a security threat
Disabling unused services is a good security practice
Use systemctl and chkconfig to disable services

systemctl used to interact with services
chkconfig for enabling/disabling services
mask maps service to null so it won't start
Commonly disabled services atd, avahi-daemon, cups

Limiting resource usage
Limit system resources such as threads, open files and memory
pam_limits.so module allows operaters to control how much of any one resource a user may access
hard/soft links
hard links can't be surpassed
Use ulimit
Most systems have it preloaded
ulimit can be used to adjust limits at runtime
Persistant limits at /etc/security/limits.conf

Tuning kernel parameters
sysctl command
mapped to procfs filesystem
Kernel parameters set persistently in /etc/sysctl.conf
See kernel-docs for additional information

Managing ASLR
Address Space Layout Randomization
Ensures every time a program loads it loads into a different place in memory

NX Bit
CPU feature
Prevents execution from protected memory areas
Exec-Shield software solution for CPUs that lack feature
Still exists very few processors that use it

ICMP security Settings
Network security may be enhaqnced through kernel parameter tuning
Disabling ICMP is a common security measure
net.ipv4.icmp_echo_ignore_all to 1

=== Kernel Security Part 2 ===
Systectl Review
sysctl -a
sysctl -ar SEARCH_PATTERN
procfs

Setting parameters
sysctl -w PARAM=VALUE
sysctl -w net.ipv4.icmp_echo_ignore_all=0
echo "sysctl -w net.ipv4.icmp_echo_ignore_all=0" > /etc/sysctl.conf

Persistent changes:
/etc/sysctl.conf

/proc/sys

Chroot environments
Fake root that is set for a specific user and process
Root file system in regular file system
Only the essential files necessary for a process to function
SFTP and DNS are two common use cases

An unprivileged user/process is unable to access outside a chroot environment
Be mindful of hard links

Virtualization
Similar but more advanced
Containerization is similar in nature
Segments resources and processes from each other

=== Securing Grub ===
Boot parameters present a security threat:
Specific options may allow unauthorized access to a system

Grub is capable of password protection for menu entries
Grub 1 was only able to support passwords and not unique user accounts
Grub 2 has more robust security

Configuring users in
/etc/grub.d/01_users:
set superusers="USER"
Password USER PASSWORD
Password notsuper OTHERPASS

Needs to be in cat section

Configuring menu entries
grep menuentry
/boot/grub2/grub.cfg in
/etc/grub.d/40_custom:
menuentry "menu item" --usersnotsuper

unrestricted line
Change to --users
Only superuser can boot

--users USERNAME,USERNAME
Other users can boot

Now only those usernames can edit

Building grub configuration:
grub2-mkconfig -o /boot/grub2/grub.cfg

Write to tmp first just in case it doesn't work
grub2-mkconfig -o /temp/grub.cfg

=== Hands-On Lab: Linux Kernel Security ===
Create a Text File for the Kernel Parameters
Create a new text file called investigate.txt.
touch /home/cloud_user/investigate.txt

Install the Kernel Documentation
Run the following command:
sudo yum install kernel-doc

Type y at the prompt.

Find and Document the Value of the randomize_va_space Parameter
Open the kernel.txt file of the sysctl documentation.
vim /usr/share/doc/kernel-doc-3.10.0/Documentation/sysctl/kernel.txt

Type /random to search the document for entries pertaining to address space randomization.
Press Esc, and type :q to exit the vim text editor.
Search for the term "randomize_va" using sysctl.
sysctl -ar randomize_va

Add the value of the parameter to the investigate.txt file.
sysctl -ar randomize_va >> investigate.txt

Find and Document the Values of All ICMP Kernel Parameters
Search for the term "ICMP" using sysctl.
sysctl -ar icmp

Add the values of the ICMP parameters to the investigate.txt file.
sysctl –ar icmp >> investigate.txt

Temporarily Disable ICMP Using a Kernel Parameter
Run the following command:
sudo sysctl –w net.ipv4.icmp_echo_ignore_all=1

Find and Document the Current Kernel Security Limits
View the contents of /etc/security/limits.conf.
vim /etc/security/limits.conf

Press Esc, and type :q to exit the vim text editor.
Write the contents of /etc/security/limits.conf to investigate.txt.
cat /etc/security/limits.conf >> investigate.txt

Locate the current security limits for cloud_user.
ulimit -a

Write the output of the ulimit -a command to investigate.txt.
ulimit -a >> investigate.txt

Review the contents of the investigate.txt file.
vim investigate.txt

== 326.2 Host Intrustion Detection ==
=== Threat Detection ===
Threat Detection Tools
System Auditing with Auditd

Important thing
Post-incident tools.
Tools only find something after an incident occurs

Tools in question
AIDE
OpenSCAP
Linux Malware Detect
Rkhunter
Chkrootkit

Important for the test
Know commands and options
Understand broad concepts
Know configuration directives

AIDE
Advanced Intrusion Detection Environment
aide --init
aide --check

Config
/etc/aide.conf

Once Aide run and database stored, store database in offline location in case it's tampered with

Note rules and what options are for (p: permissions etc.)
Not everything you want watched in the same way

Once rules are defined they can be applied to a filepath

Filepaths can also be set to ignore

Defaults should be okay

Initial command once configuration complete
aide --init

Slow, will generate database. Run as root.

Check against database with
aide --check

OpenSCAP
SCAP
Security Content Automation Protocol
Community project started by Red Hat

OpenSCAP
An implementation of SCAP
Vulnerability Assessment
Security Compliance
Be aware of what it is

=== Working with Maldet ===
Linux Malware Detect
LMD
Maldet

Commands:
maldet -a
maldet -e
systemctl cat maldet

Configuration
/usr/local/maldet/conf.maldet
/usr/local/maldet/monitor_paths

Uses external signatures to look for threats
inotify-tools package
Realtime monitoring

Clamav tool
Not tested on
Can be used with maldet

Note monitor_paths and ignore_paths

scan_clamscan
Used to integrate clamscan

quarantine options
Option to quarantine file
By default only alerts
Set to 1 to alert file

Directives to note
How to scan,
maldet -a /path/to/file

Can use ? as a wildcard

maldet -e to view reports

Monitor mode
maldet --monitor
Real time monitoring via inotify-tools
Performance hit

Help
Lists flags

Help is closest to man page

=== Understanding Rootkits ===
Rootkit detection
Chkrootkit
chkrootkit -q

Rkhunter
rkhunter -c --cronjob -rwo
/var/log/rkhunter/rkhunter.log

/etc/rkhunter.conf

rkhunter --update
Cron that

AIDE may also detect rootkits
Kernel modules are popular places to hide rootkits

Only run commands as root if you need to

=== System Auditing in Linux ===
Auditing vs. Logging
Logs vary by system and software
Audit runs at the OS level

Auditd
Built into RHEL distros
Installable on DEB distros

Customizable

Working with Auditd
Commands
ausearch
aureport
auditctl

Configuration
/etc/audit/auditd.conf
/etc/audit/rules.d
/etc/audit/audit.rules

Files
/var/log/audit.log
/etc/pam.d/system-auth

=== Hands-On Lab: Working with the Audit Log ===
Create the Audit Rules

Create an audit rule to watch /etc/passwd for reads.
sudo auditctl -w /etc/passwd -p w -k userwatch

Create an audit rule to watch /etc/sudoers/ for reads and writes.
sudo auditctl -w /etc/sudoers -p rw -k sudowatch

Create an audit rule to watch /sbin/visudo for executions.
sudo auditctl -w /sbin/visudo -p x -k sudowatch

Verify that the audit rules were successfully created.
sudo auditctl -l

Generate an Audit Rule List in a Text File

Output the contents of the audit rule list to a file called rules.txt.
sudo auditctl -l > /home/cloud_user/rules.txt

Generate Logs

Create a new user.
sudo useradd bob

Run the visudo command.
sudo visudo

Press Esc, and type :q to exit the vim text editor.

Generate the Text File Reports

Generate the userwatch.txt report in /home/cloud_user.
sudo ausearch -k userwatch > /home/cloud_user/userwatch.txt

Verify that this was successful.
less /home/cloud_user/userwatch.txt

Type q to exit the less screen.
Generate the sudowatch.txt report in /home/cloud_user.
sudo ausearch -k sudowatch > /home/cloud_user/sudowatch.txt

Verify that this was successful.
less /home/cloud_user/sudowatch.txt

== 326.3 User Management and Authentication ==
=== Linux Login Essentials ===
Linux Login Basics
PAM Concepts and Configuration
Kerberos
Understanding SSSD

/etc/login.defs:
Used to be main login configuration
Replaced by PAM (Pluggable Authentication Modules)

Still used,
MAIL_DIR
UID and GID settings
UMASK

Typically >500 system users

chage
Requires root for most functionality
User must be in /etc/shadow
Local user

-E yyyy-mm-dd login
Set expiration

-I days login
Set number of days of inactivity to expire user

-W days login
How many days for password expiration

-1 may be used to disable options

NSS
Name Service Switch
Calls for info from a system database to a back-end service
Know contents of /etc/nsswitch.conf

/etc/nsswitch.conf
Databases
passwd
shadow
group
hosts

Services
files
sss
dns

passwd: files sss
/etc/passwd
sss
User makes an action
Checks file
If it doesn't find it it'll query sss service
Follows order of services listed

hosts: files dns myhostname
Check /etc/hosts first then dns

If using something like LDAP most goes through SSSD

=== PAM Concepts ===
Pluggable Authentication Module
Modules handling unique function for authentication and authorization

Four groups
Auth: Used for authentications
Account: Deals with account work
Password: Work with passwords
Session: Interact with user session properties

PAM
Configuration:
/etc/pam.d/*

Modules:
pam_tally2.so
pam_cracklib.so

=== Kerberos Concepts ===
=== Understanding SSSD ===
=== Hands-On Lab: Configuring PAM ===
=== Hands-On Lab: Configuring SSSD ===

== 326.4 FreeIPA Installation and Samba Integration ==
=== Overview of FreeIPA ===
=== Installing and Configuring FreeIPA ===
=== Working with FreeIPA ===
=== Hands-On Lab: Working with FreeIPA ===

== 327.1 Discretionary Access Control ==
=== Basic System Permissions ===
=== Extended Attributes ===
=== Using ACLs ===
=== Hands-On Lab: Managing File Attributes and Permissions ===

== 327.2 Mandatory Access Control ==
=== Understanding MAC ===
=== SELinux ===
=== AppArmor and Smack: MAC alternatives ===
=== Hands-On Lab: Troubleshooting SELinux ===

== 327.3 Network File Systems ==
=== NFSv4 Improvements ===
=== NFS in Practice ===
=== NFS4 ACLs ===
=== CIFS Configuration ===
=== Hands-On Lab: Exporting an NFSv4 Volume with ACLs ===

== 328.1 Network Hardening ==
=== Configuring FreeRADIUS ===
=== Analyzing Network Traffic ===
=== Network Utilities and Threats ===
=== Hands-On Lab: Packet Capture and Analysis ===

== 328.2 Network Intrustion Detection ==
=== Network Monitoring ===
=== Configure and Use Snort ===
=== OpenVAS Overview ===

== 328.3 Packet filtering ==
=== Firewall Concepts ===
=== Advanced Firewall Concepts ===
=== Ebtables and Nftables ===
=== Hands-On Lab: Working with IP Sets and iptables ===

== 328.4 Virtuan Private Networks ==
=== OpenVPN ===
=== IPSec Concepts ===
=== Hands-On Lab: Working with OpenVPN (and iptables) ===
